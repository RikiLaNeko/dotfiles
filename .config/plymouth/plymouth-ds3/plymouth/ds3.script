# === Background ===
Window.SetBackgroundTopColor(0.0, 0.0, 0.0);
Window.SetBackgroundBottomColor(0.0, 0.0, 0.0);

ref_width = 1920.0;
ref_height = 1080.0;

# === MAIN BOX ===
main_box.image = Image("main_box.png");
main_box.sprite = Sprite(main_box.image);
main_box.pos = [418, 161];
main_box.sprite.SetPosition(main_box.pos[0], main_box.pos[1], 1);
main_box.sprite.SetOpacity(1);

# === LOGO ===
ds_logo.image = Image("darksouls3_logo.png");
ds_logo.sprite = Sprite(ds_logo.image);
ds_logo.pos = [191, 956];
ds_logo.sprite.SetPosition(ds_logo.pos[0], ds_logo.pos[1], 2);
ds_logo.sprite.SetOpacity(1);

# === LOADING ANIMATION FROM SPRITESHEET ===
animation_first_frame = 0;
animation_last_frame = 31; 
animation_current_frame = 0;
# Change to make the animation faster/slower
animation_frame_delay = 3;  
progress = 0;

# Load and store all cropped frame images
for (frame = animation_first_frame; frame <= animation_last_frame; frame++) {
    animation_images[frame] = Image("bonefire_ani/loading_icon-" + frame + ".png");
}

# Create a sprite and position it at (188, 848)
animation_sprite = Sprite();
animation_sprite.SetX(188);
animation_sprite.SetY(848);
animation_sprite.SetZ(2);


# === FADE VARIABLES ===
fade_in_duration = 35; 
fade_in_progress = 0;
fade_out_duration = 20; 
fade_out_progress = 0;
is_fading_out = 0;


# Depending on Mode 
current_mode = Plymouth.GetMode();  # "boot", "shutdown", etc.

enable_fade_in = 0;

if (current_mode == "boot") {
    enable_fade_in = 1;
}


# === BLACK OVERLAY FOR FADE-IN ===
overlay.image = Image("black.png");
overlay.scaled_image = overlay.image.Scale(Window.GetWidth(), Window.GetHeight());
overlay.sprite = Sprite(overlay.scaled_image);
overlay.sprite.SetPosition(0, 0, 999);
overlay.sprite.SetOpacity(1); 


fun update_fade_out() {
    if (fade_out_progress < fade_out_duration) {
        overlay_opacity = (1.0 - (fade_out_progress / fade_out_duration));
        overlay_opacity *= overlay_opacity;  
        overlay.sprite.SetOpacity(1.0 - overlay_opacity);  
        fade_out_progress += 1;
    } else {
        overlay.sprite.SetOpacity(1.0);  
    }
}


# === FADE-IN FUNCTION ===
fun update_fade_in() {
    if (fade_in_progress < fade_in_duration) {
        overlay_opacity = 1.0 - ((fade_in_progress / fade_in_duration) * (fade_in_progress / fade_in_duration));
        overlay.sprite.SetOpacity(overlay_opacity);
        fade_in_progress++;
    }
}


# Set the animation refresh function
fun on_refresh() {
    progress += 1;    
    
    if (!is_fading_out && enable_fade_in) {
     update_fade_in();
    }
     else{
        update_fade_out();
    }

    # Only update image every animation_frame_delay frames
    if (progress % animation_frame_delay == 0) {
        animation_current_frame += 1;
        if (animation_current_frame > animation_last_frame) {
            animation_current_frame = animation_first_frame;
        }
        animation_sprite.SetImage(animation_images[animation_current_frame]);
    }
}

Plymouth.SetRefreshFunction(on_refresh);

# === ITEM IMAGE ===
item_image = Image("sprites/soul_of_slave_knight_gael.png");

item_scaled_width = Math.Int(item_image.GetWidth() * 0.6);
item_scaled_height = Math.Int(item_image.GetHeight() * 0.6);
item_scaled_image = item_image.Scale(item_scaled_width, item_scaled_height);

item_sprite = Sprite(item_scaled_image);
item_sprite.SetPosition(566, 249, 2);
item_sprite.SetOpacity(1);


fun create_text_color(text, x, y, r, g, b, font) {
    t.image = Image.Text(text, r, g, b, 1, font);
    s.image = Image.Text(text, r/4, g/4, b/4, 1, font);

    t.sprite = Sprite(t.image);
    s.sprite = Sprite(s.image);
    t.sprite.SetPosition(x, y, 3);
    s.sprite.SetPosition(x + 1, y + 1, 2);

    t.sprite.SetOpacity(1);
    s.sprite.SetOpacity(1);
	

    return [t, s, text];
}

# === Define fonts with sizes ===
font_title = "FOT-Matisse Pro 22";                              
font_description = "FOT-Matisse Pro 16";                              

# === Create Title Text ===
title_text = "Soul of Slave Knight Gael\n";

# === Create Description Text ===
description_text = ["Soul of Slave Knight Gael.", "One of the twisted souls, steeped in strength.", "", "Use to acquire many souls, or transpose to extract its true strength.", "", "The red-hooded, wandering slave knight Gael sought the blood of the dark soul as pigment for the Painted World.", "But Gael knew he was no Champion, that the dark soul would likely ruin him, and that he had little hope of a safe return."];

# === Create text elements ===
item_title = create_text_color(title_text, 672, 309, 165/255.0, 144/255.0, 103/255.0, font_title);

# === Constants ===
max_width = 750;
start_x = 672;
start_y = 373;
line_spacing = 31;

fun SplitString(str, delimiter) {
    result = [];
    current_word = "";
    result_idx = 0;

    for (i = 0; i < str.Length(); i += 1) {
        c = str.CharAt(i);

        if (c == delimiter.CharAt(0)) {
            
             if (current_word != "") {
                result[result_idx] = current_word;
                current_word = "";
                result_idx+=1;
             }

        } else {
               current_word += c;
        }
    }
    
    if (current_word != "") {
        result[result_idx] = current_word;
    }

    return result;
}


fun wrap_and_render_text(lines, x, y, r, g, b, font) {
   rendered = [];
   rendered_idx = 0;
   for( i = 0; lines[i] != NULL; i++){
       line = lines[i];
       
        if (line == ""){
          y+= line_spacing;
          continue;
       }
       
       words = SplitString(line, " ");
       current_line = "";
       w = 0;
       for (j = 0;words[j] != NULL; w++) {
            test_line = current_line;
            
           if (test_line != "") {
                test_line += " ";
            }
           
            test_line += words[j];

            test_image = Image.Text(test_line, r, g, b, 1, font);
            if (test_image.GetWidth() <= max_width) {
                current_line = test_line;
                j += 1;
            } else {
                if (current_line != "") {
                    current_line += "\n";
                    rendered[rendered_idx] = create_text_color(current_line, x, y, r, g, b, font);
                    y += line_spacing;
                    current_line = "";
                    rendered_idx+=1;
                } else {
                    forced_word = words[j] + "\n";
                    rendered[rendered_idx] = create_text_color(current_line, x, y, r, g, b, font);
                    y += line_spacing;
                    j += 1;
                    rendered_idx+=1;
                }
            }
        }

        if (current_line != "") {
            current_line += "\n";
            rendered[rendered_idx] = create_text_color(current_line, x, y, r, g, b, font);
            rendered_idx+=1;
            y += line_spacing;
        }    
    }
   return rendered;
}

rendered_text_description = wrap_and_render_text(description_text, start_x, start_y, 208/255.0, 208/255.0, 208/255.0, font_description);

# === QUIT FUNCTION FOR FADE-OUT ===
fun on_quit() {
    is_fading_out = 1;
    fade_out_progress = 0;
}

Plymouth.SetQuitFunction(on_quit);
